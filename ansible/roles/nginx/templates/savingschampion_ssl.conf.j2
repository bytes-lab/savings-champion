uwsgi_cache_path /var/cache/nginx levels=1:2 keys_zone=microcache:5m max_size=1000m;

server {
    listen               443 ssl;
    access_log           /var/log/nginx/{{ name }}.log;
    ssl_certificate      /etc/nginx/wildcard_savingschampion_co_uk.crt;
    ssl_certificate_key  /etc/nginx/wildcard_savingschampion_co_uk.key;

    ssl_prefer_server_ciphers On;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;

    #HTTP Strict Transport Security
    #add_header Strict-Transport-Security "max-age=30; includeSubDomains";
    #add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

    client_max_body_size 10M;
    # Gzip configuration
    gzip on;
    gzip_static on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    gzip_vary on;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;

    # don't gzip images, woff
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript text/x-js font/ttf font/opentype application/vnd.ms-fontobject image/svg+xml;

    try_files $uri @proxied;

location @proxied {
    include uwsgi_params;


    set $no_cache "";
    # If non GET/HEAD, don't cache & mark user as uncacheable for 1 second via cookie
    if ($request_method !~ ^(GET|HEAD)$) {
        set $no_cache "1";
    }
    # Drop no cache cookie if need be
    # (for some reason, add_header fails if included in prior if-block)
    if ($no_cache = "1") {
        add_header Set-Cookie "_mcnc=1; Max-Age=2; Path=/";            
        add_header X-Microcachable "0";
    }
    # Bypass cache if no-cache cookie is set
    if ($http_cookie ~* "_mcnc") {
        set $no_cache "1";
    }
    # Bypass cache if flag is set
    uwsgi_no_cache $no_cache;
    uwsgi_cache_bypass $no_cache;
    # Point nginx to the real app/web server
    # Set cache zone
    uwsgi_cache microcache;
    # Set cache key to include identifying components
    uwsgi_cache_key $host$request_method$request_uri;
    # Only cache valid HTTP 200 responses for 1 second
    uwsgi_cache_valid 200 1s;
    # Serve from cache if currently refreshing
    uwsgi_cache_use_stale updating;
    # Set files larger than 1M to stream rather than cache
    uwsgi_max_temp_file_size 1M;

    include uwsgi_params;
    uwsgi_pass uwsgi_cluster;

}

location /static {
    expires 1y;
    alias /srv/savings_champion/static/;
}

location /assets {
    expires 1y;
    alias /srv/savings_champion/savings_champion/assets/;
}

location /nginx_status {
  # copied from http://blog.kovyrin.net/2006/04/29/monitoring-nginx-with-rrdtool/
  stub_status on;
  access_log   off;
  allow 127.0.0.1;
  deny all;
}

}

upstream uwsgi_cluster {
    {% for app_server in groups['app_servers'] %}
        server {{ hostvars[app_server]['ansible_eth0']['ipv4']['address'] }}:9191;
    {% endfor %}
}